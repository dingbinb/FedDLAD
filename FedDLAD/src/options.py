import torch
import argparse

def args_parser():
    parser = argparse.ArgumentParser()

    parser.add_argument('--data', type=str, default='svhn',
                        help="the dataset to be trained on")

    parser.add_argument('--num_agents', type=int, default=50,
                        help="number of agents")

    parser.add_argument('--backdoor_frac', type=float, default=0.2,
                        help="fraction of backdoor agents")

    parser.add_argument('--train_rounds', type=int, default=100,
                        help="number of communication rounds")

    parser.add_argument('--local_ep', type=int, default=2,
                        help="number of local epochs")

    parser.add_argument('--server_lr', type=float, default=1,
                        help='server learning rate')

    parser.add_argument('--base_class', type=int, default=0,
                        help="ground-truth label")

    parser.add_argument('--target_class', type=int, default=5,
                        help="target-label")

    parser.add_argument('--poison_frac', type=float, default=0.2,
                        help="target_class poisoning ratio for backdoor attack")

    parser.add_argument('--trigger', type=str, default='CBA',
                        choices=['CBA', 'DBA'], help="trigger patterns")

    parser.add_argument('--attack', type=str, default='single-shot',
                        choices=['single-shot', 'continuous'],
                        help="attack types(single or continuous)")

    parser.add_argument('--attack_round', type=int, default= 0,
                        help="start attacking from round(single-shot)")

    parser.add_argument('--attack_interval', type=int, default=1,
                        help="attack interval rounds(single-shot)")

    parser.add_argument('--data_distribution', type=str, default='non_iid',
                        help="data distribution across agents")

    parser.add_argument('--alpha', type=float, default=0.5,
                        help="dirichlet distribution parameter for data partitioning")

    parser.add_argument('--defense', type=str, default='FedDLAD',
                        choices=['FedAvg', 'Krum', 'Median', 'RLR', 'FoolsGold', 'FLAME', 'FLTrust', 'MultiMetrics' , 'SnowBall', 'FedDLAD'],
                        help="defense methods")

    parser.add_argument('--optimizer', type=str, default='SGD',
                        help="gradient optimizer")

    parser.add_argument('--num_classes', type=int, default=10,
                        help="number of classes in the dataset")

    parser.add_argument('--class_per_agent', type=int, default=10,
                        help="number of classes each client has")

    parser.add_argument('--agent_frac', type=float, default=0.5,
                        help="number of clients participating in each round")

    parser.add_argument('--bs', type=int, default=256,
                        help="local batch size")

    parser.add_argument('--num_workers', type=int, default=0,
                        help="num of workers for multithreading")

    parser.add_argument('--snap', type=int, default=1,
                        help="do inference in every num of snap rounds")

    parser.add_argument('--device', default=torch.device("cuda:0" if torch.cuda.is_available() else "cpu"),
                        help="to use cuda, set to a specific GPU ID.")

    #FedDLAD settings
    #COF
    parser.add_argument('--bg', type=int, default=12, help="benign group size")
    #IQR
    parser.add_argument('--iqr_scale', type=float, default=0.6, help='scale factor for IQR-based outlier thresholding')
    #Pardoned
    parser.add_argument('--pg', type=int, default=3, help="pardoned group size")


    # SnowBall settings
    parser.add_argument('--model', default='CNN_FMNIST', type=str)

    parser.add_argument('--ct', default=10, type=int,
                        help='`cluster threshold`, the number of clusters in `BottomUpElection` is <ct> + 1')

    parser.add_argument('--vt', default=0.7, type=float,
                        help='threshold of TopDownElection')

    parser.add_argument('--v_step', default=0.05, type=float,
                        help='step of TopDownElection')

    parser.add_argument('--vae_hidden', default=270, type=int,
                        help='the dimensionality of hidden layer outputs of the encoder and decoder of the VAE')

    parser.add_argument('--vae_latent', default=64, type=int,
                        help='the dimensionality of the latent feature generated by the encoder')

    parser.add_argument('--vae_initial', default=270, type=int,
                        help='the number of epochs in initial training')

    parser.add_argument('--vae_tuning', default=30, type=int,
                        help='the number of epochs in tuning')

    args = parser.parse_args()
    return args
